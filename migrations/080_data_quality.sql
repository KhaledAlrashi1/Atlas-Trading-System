--------------------------------------------------------------------------------
-- ATLAS Data-Quality (DQ) Framework
-- Tables, rules, runner procedure, and summary view
--------------------------------------------------------------------------------

-- A. DQ issue register
CREATE TABLE ATLAS_DQ_ISSUE (
  ISSUE_ID     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  TS           TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
  RULE_CODE    VARCHAR2(40)   NOT NULL,    -- e.g., TRD_BAD_SIDE
  SEVERITY     VARCHAR2(10)   NOT NULL,    -- INFO|WARN|ERROR
  ENTITY       VARCHAR2(40)   NOT NULL,    -- ATLAS_TRADE, ATLAS_POSITION, ...
  ENTITY_ID    NUMBER         NOT NULL,    -- PK value in that entity
  DETAILS      VARCHAR2(4000) NOT NULL,    -- human description
  RESOLVED_FLG CHAR(1) DEFAULT 'N' CHECK (RESOLVED_FLG IN ('Y','N'))
);

CREATE INDEX ATLAS_DQ_I1 ON ATLAS_DQ_ISSUE (RULE_CODE, SEVERITY, TS);
CREATE INDEX ATLAS_DQ_I2 ON ATLAS_DQ_ISSUE (ENTITY, ENTITY_ID, RESOLVED_FLG);

-- B. Helper to log an issue
CREATE OR REPLACE PACKAGE ATLAS_PKG_DQ AS
  PROCEDURE log_issue(p_rule IN VARCHAR2, p_sev IN VARCHAR2,
                      p_entity IN VARCHAR2, p_entity_id IN NUMBER,
                      p_details IN VARCHAR2);

  PROCEDURE resolve_issue(p_issue_id IN NUMBER);

  -- Run all checks; returns how many issues added this run
  FUNCTION run_all RETURN NUMBER;
END ATLAS_PKG_DQ;
/

CREATE OR REPLACE PACKAGE BODY ATLAS_PKG_DQ AS
  PROCEDURE log_issue(p_rule IN VARCHAR2, p_sev IN VARCHAR2,
                      p_entity IN VARCHAR2, p_entity_id IN NUMBER,
                      p_details IN VARCHAR2) IS
  BEGIN
    INSERT INTO ATLAS_DQ_ISSUE(RULE_CODE, SEVERITY, ENTITY, ENTITY_ID, DETAILS)
    VALUES (p_rule, UPPER(p_sev), UPPER(p_entity), p_entity_id, p_details);
  END;

  PROCEDURE resolve_issue(p_issue_id IN NUMBER) IS
  BEGIN
    UPDATE ATLAS_DQ_ISSUE
       SET RESOLVED_FLG='Y'
     WHERE ISSUE_ID = p_issue_id;
  END;

  --------------------------------------------------------------------------
  -- Individual RULES (add more as needed)
  --------------------------------------------------------------------------

  -- R1: Trade has invalid SIDE (should be prevented by CHECK, but detect anyway)
  PROCEDURE r_trd_bad_side IS
  BEGIN
    FOR r IN (
      SELECT trade_id, side
      FROM   ATLAS_TRADE
      WHERE  side NOT IN ('BUY','SELL')
    ) LOOP
      log_issue('TRD_BAD_SIDE','ERROR','ATLAS_TRADE', r.trade_id,
                'Invalid SIDE='||NVL(r.side,'NULL'));
    END LOOP;
  END;

  -- R2: Negative or zero quantity/price (also prevented by CHECKs)
  PROCEDURE r_trd_nonpositive IS
  BEGIN
    FOR r IN (
      SELECT trade_id, qty, price
      FROM   ATLAS_TRADE
      WHERE  (qty  <= 0) OR (price <= 0)
    ) LOOP
      log_issue('TRD_NONPOS','ERROR','ATLAS_TRADE', r.trade_id,
                'qty='||r.qty||', price='||r.price);
    END LOOP;
  END;

  -- R3: Orphan foreign keys (defensive if data imported bypassing FKs)
  PROCEDURE r_trd_orphans IS
  BEGIN
    FOR r IN (
      SELECT t.trade_id
      FROM   ATLAS_TRADE t
      LEFT JOIN ATLAS_INSTRUMENT i ON i.instrument_id = t.instrument_id
      LEFT JOIN ATLAS_ACCOUNT   a ON a.account_id    = t.account_id
      WHERE (i.instrument_id IS NULL OR a.account_id IS NULL)
    ) LOOP
      log_issue('TRD_ORPHAN','ERROR','ATLAS_TRADE', r.trade_id,
                'Instrument or Account missing');
    END LOOP;
  END;

  -- R4: Suspicious dates (future trade date)
  PROCEDURE r_trd_future_date IS
  BEGIN
    FOR r IN (
      SELECT trade_id, trade_dt
      FROM   ATLAS_TRADE
      WHERE  trade_dt > TRUNC(SYSDATE) + 1  -- more than 1 day in future
    ) LOOP
      log_issue('TRD_FUTURE_DT','WARN','ATLAS_TRADE', r.trade_id,
                'trade_dt='||TO_CHAR(r.trade_dt,'YYYY-MM-DD'));
    END LOOP;
  END;

  -- R5: Positions uniqueness drift (should be prevented by UNIQUE)
  PROCEDURE r_pos_dup_key IS
  BEGIN
    FOR r IN (
      SELECT asof_dt, instrument_id, account_id, COUNT(*) c
      FROM   ATLAS_POSITION
      GROUP  BY asof_dt, instrument_id, account_id
      HAVING COUNT(*) > 1
    ) LOOP
      log_issue('POS_DUP','ERROR','ATLAS_POSITION', -1,
                'Duplicate key for ASOF/INSTR/ACCT: '||
                TO_CHAR(r.asof_dt,'YYYY-MM-DD')||','||r.instrument_id||','||r.account_id||
                ', count='||r.c);
    END LOOP;
  END;

  --------------------------------------------------------------------------
  -- Run all
  --------------------------------------------------------------------------
  FUNCTION run_all RETURN NUMBER IS
    v_before NUMBER;
    v_after  NUMBER;
  BEGIN
    SELECT COUNT(*) INTO v_before FROM ATLAS_DQ_ISSUE WHERE RESOLVED_FLG='N';

    r_trd_bad_side;
    r_trd_nonpositive;
    r_trd_orphans;
    r_trd_future_date;
    r_pos_dup_key;

    SELECT COUNT(*) INTO v_after FROM ATLAS_DQ_ISSUE WHERE RESOLVED_FLG='N';
    RETURN v_after - v_before;
  END;
END ATLAS_PKG_DQ;
/

-- C. Summary view for dashboards / APEX
CREATE OR REPLACE VIEW ATLAS_VW_DQ_SUMMARY AS
SELECT
  RULE_CODE,
  SEVERITY,
  COUNT(*) AS OPEN_ISSUES
FROM ATLAS_DQ_ISSUE
WHERE RESOLVED_FLG='N'
GROUP BY RULE_CODE, SEVERITY
ORDER BY SEVERITY, RULE_CODE;

-- (Optional) Example of a remediation helper â€“ fix common invalid sides
CREATE OR REPLACE PROCEDURE ATLAS_DQ_FIX_TRD_SIDE IS
BEGIN
  -- Normalize common typos to BUY/SELL, log audit
  FOR r IN (
    SELECT trade_id, side FROM ATLAS_TRADE
    WHERE side NOT IN ('BUY','SELL')
  ) LOOP
    UPDATE ATLAS_TRADE
       SET SIDE = CASE UPPER(TRIM(side))
                    WHEN 'B' THEN 'BUY'
                    WHEN 'S' THEN 'SELL'
                    ELSE SIDE
                  END
     WHERE TRADE_ID = r.trade_id;

    INSERT INTO ATLAS_AUDIT(ACTOR, ACTION, ENTITY, ENTITY_ID, DETAILS)
    VALUES ('dq@atlas','FIX_TRD_SIDE','ATLAS_TRADE', r.trade_id, 'Normalized side='||r.side);
  END LOOP;
END;
/
